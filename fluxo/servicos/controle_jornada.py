from fluxo.etapas_jornada import identificar_etapa_jornada
from fluxo.objecoes import identificar_objecao
from fluxo.consciencia_cliente import classificar_consciencia


def controlar_jornada(mensagem: str, estado_anterior: dict = None) -> dict:
    """
    FunÃ§Ã£o central de controle da jornada do lead.
    Recebe a mensagem atual e o estado anterior (se existir),
    e retorna um novo estado atualizado com base na lÃ³gica de evoluÃ§Ã£o.
    """
    nova_etapa = identificar_etapa_jornada(mensagem)
    nova_objecao = identificar_objecao(mensagem)
    nova_consciencia = classificar_consciencia(mensagem)

    estado_atualizado = {
        "etapa": nova_etapa or (estado_anterior.get("etapa") if estado_anterior else None),
        "objeÃ§Ã£o": nova_objecao or (estado_anterior.get("objeÃ§Ã£o") if estado_anterior else None),
        "consciÃªncia": nova_consciencia or (estado_anterior.get("consciÃªncia") if estado_anterior else None)
    }

    # ğŸ’¡ Aqui no futuro podemos inserir lÃ³gica de progressÃ£o:
    # - Se lead respondeu X, avanÃ§a etapa
    # - Se objeÃ§Ã£o desaparece, limpa objeÃ§Ã£o
    # - Se consciÃªncia muda, atualiza

    return estado_atualizado
