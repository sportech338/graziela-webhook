import re
from typing import Optional
from fluxo.servicos.openai_client import gerar_resposta
from fluxo.etapas_jornada import ETAPAS_JORNADA

FRASES_PROIBIDAS = [
    "se tiver d√∫vidas, estou √† disposi√ß√£o",
    "me chama se quiser",
    "qualquer coisa, estou por aqui"
]

def contem_frase_proibida(texto: str) -> bool:
    texto_lower = texto.lower()
    return any(frase in texto_lower for frase in FRASES_PROIBIDAS)

def remover_emojis_repetidos(texto: str, emojis_ja_usados: list[str]) -> tuple[str, list[str]]:
    emojis_validos = ["üòä", "üíô"]
    novos_emojis_usados = []

    for emoji in emojis_validos:
        ocorrencias = [m.start() for m in re.finditer(re.escape(emoji), texto)]
        if emoji in emojis_ja_usados and ocorrencias:
            texto = texto.replace(emoji, "", len(ocorrencias))
        elif ocorrencias:
            texto = texto.replace(emoji, "", len(ocorrencias) - 1)
            novos_emojis_usados.append(emoji)

    return texto, novos_emojis_usados

def gerar_resposta_formatada(prompt: list[dict], emojis_ja_usados: list[str]) -> tuple[Optional[str], list[str]]:
    resposta = gerar_resposta(prompt)
    if not resposta:
        return None, []

    resposta, novos_emojis = remover_emojis_repetidos(resposta, emojis_ja_usados)

    if contem_frase_proibida(resposta):
        print("‚ö†Ô∏è Frase passiva detectada. Solicitando reformula√ß√£o autom√°tica.")
        reformulacao_prompt = [
            {"role": "system", "content": "Voc√™ √© Graziela, consultora da Sportech. Reformule a mensagem anterior."},
            {"role": "user", "content": f"""Essa foi a resposta que voc√™ deu:

{resposta}

‚ö†Ô∏è Ela termina com uma frase passiva que n√£o conduz a conversa.

Reescreva com tom gentil, mas encerrando com uma pergunta clara que incentive a continuidade da conversa.

Blocos curtos (m√°x. 350 caracteres) separados por duas quebras de linha."""}
        ]
        nova_resposta = gerar_resposta(reformulacao_prompt, temperatura=0.4)
        if nova_resposta:
            resposta, novos_emojis = remover_emojis_repetidos(nova_resposta, emojis_ja_usados)

    return resposta, novos_emojis

def montar_prompt_por_etapa(
    etapa: str,
    mensagem_cliente: str,
    contexto: str,
    base_prompt: str,
    objecao: Optional[str] = None,
    justificativa_objecao: Optional[str] = None,
    ambiguidade_justificativa: Optional[str] = None,
    justificativa_etapa: Optional[str] = None,
    consciencia: Optional[str] = None,
    justificativa_consciencia: Optional[str] = None,
    temperatura: Optional[str] = None,
    justificativa_temperatura: Optional[str] = None
) -> list[dict]:
    prompt = [{"role": "system", "content": base_prompt}]

    if contexto:
        prompt.append({
            "role": "user",
            "content": f"Hist√≥rico da conversa at√© aqui:\n{contexto}"
        })

    if ambiguidade_justificativa:
        prompt.append({
            "role": "user",
            "content": f"‚ö†Ô∏è Aten√ß√£o: Pode haver ambiguidade, d√∫vida ou ironia na √∫ltima mensagem.\n\n{ambiguidade_justificativa}\n\nUse o hist√≥rico para validar se √© o caso e responda de forma emp√°tica e clara."
        })

    if objecao:
        justificativa_txt = f"\n\nContexto adicional: {justificativa_objecao}" if justificativa_objecao else ""
        prompt.append({
            "role": "user",
            "content": f"‚ö†Ô∏è Obje√ß√£o detectada: {objecao.replace("_", " ").capitalize()}.{justificativa_txt}\n\nAntes de seguir normalmente, contorne a obje√ß√£o com empatia, prova social e refor√ßo de confian√ßa.\n\nS√≥ depois retome o fluxo com condu√ß√£o leve e consultiva.\n\n‚ö†Ô∏è Use blocos curtos (m√°x. 350 caracteres), com duas quebras de linha entre eles."
        })

    if etapa:
        justificativa_etapa_txt = f"\nJustificativa da etapa sugerida: {justificativa_etapa}" if justificativa_etapa else ""
        prompt.append({
            "role": "user",
            "content": f"Etapa sugerida: {etapa}.{justificativa_etapa_txt}"
        })

    if consciencia:
        justificativa_consciencia_txt = f"\nJustificativa da consci√™ncia sugerida: {justificativa_consciencia}" if justificativa_consciencia else ""
        prompt.append({
            "role": "user",
            "content": f"N√≠vel de consci√™ncia sugerido: {consciencia}.{justificativa_consciencia_txt}"
        })

    if temperatura:
        justificativa_temperatura_txt = f"\nJustificativa da temperatura sugerida: {justificativa_temperatura}" if justificativa_temperatura else ""
        prompt.append({
            "role": "user",
            "content": f"Temperatura do cliente: {temperatura}.{justificativa_temperatura_txt}"
        })

    prompt.append({
        "role": "user",
        "content": f"Nova mensagem do cliente:\n{mensagem_cliente}\n\nResponda com empatia, leveza e estrat√©gia. Evite frases passivas. Finalize com uma pergunta clara que incentive a continuidade.\n\nBlocos curtos (m√°x. 350 caracteres), com quebras de linha se fizer sentido."
    })

    return prompt
