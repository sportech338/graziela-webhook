from typing import Optional, Tuple
from difflib import SequenceMatcher

OBJECOES_ATIVAS = {
    "Preco": [
        "t√° caro", "muito caro", "n√£o tenho dinheiro", "sem grana", "n√£o posso pagar"
    ],
    "Confianca": [
        "nunca ouvi falar", "√© seguro?", "isso √© confi√°vel", "parece golpe"
    ],
    "Eficacia": [
        "isso funciona mesmo", "tem prova?", "funciona de verdade", "tem garantia que resolve?"
    ],
    "Entrega": [
        "demora pra chegar", "moro longe", "entrega demora", "e o frete?"
    ],
    "Garantia": [
        "posso devolver", "tem garantia", "e se eu n√£o gostar?"
    ],
    "Composicao": [
        "o que tem nele", "composi√ß√£o", "contra indica√ß√£o", "tem gl√∫ten?"
    ],
    "Forma de pagamento": [
        "n√£o uso pix", "s√≥ tenho boleto", "n√£o tenho cart√£o", "parcelar?"
    ],
    "Familia": [
        "vou falar com meu marido", "minha m√£e n√£o deixa", "vou ver com meu pai"
    ],
    "Gravidez": [
        "estou gr√°vida", "posso usar gr√°vida", "gr√°vida pode usar?"
    ]
}

EVASIVAS = {
    "Evasiva: Vou pensar": [
        "vou pensar", "te aviso depois", "vou decidir", "depois eu vejo"
    ],
    "Evasiva: Preciso consultar algu√©m": [
        "vou ver com minha esposa", "vou falar com meu m√©dico", "preciso conversar com algu√©m"
    ],
    "Evasiva: Esperar sal√°rio": [
        "recebo semana que vem", "esperar meu pagamento", "sal√°rio cai dia"
    ],
    "Evasiva: Testar primeiro": [
        "posso comprar s√≥ um", "testar primeiro", "ver se funciona primeiro"
    ],
    "Evasiva: Desconfian√ßa": [
        "tem muita coisa falsa", "n√£o confio muito", "parece bom demais"
    ],
    "Evasiva: Sil√™ncio": [
        "..."
    ]
}

def similar(a: str, b: str) -> float:
    return SequenceMatcher(None, a, b).ratio()

def identificar_objecao(mensagem: str) -> Tuple[Optional[str], Optional[str]]:
    texto = mensagem.lower()
    melhor_match = None
    melhor_score = 0.0
    justificativa = None

    for tipo, padroes in {**OBJECOES_ATIVAS, **EVASIVAS}.items():
        for padrao in padroes:
            if padrao in texto:
                return tipo, f"üîç Padr√£o identificado: \"{padrao}\""
            score = similar(padrao, texto)
            if score > 0.7 and score > melhor_score:
                melhor_match = tipo
                melhor_score = score
                justificativa = f"ü§è Similaridade com \"{padrao}\" ({score:.2f})"

    return (melhor_match, justificativa) if melhor_match else (None, None)
